{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["useInput","type","otherProps","useState","value","setValue","onChange","e","target","hpRegenLevel","1","2","3","4","App","remainingHP","remainingHPInput","heroLevel","heroLevelInput","Date","next200","setNext200","next1000","setNext1000","useEffect","remainingTime200","next200Temp","setSeconds","getSeconds","remainingTime1000","next1000Temp","className","toLocaleString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAe,I,YCITA,EAAW,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAyB,EACvBC,mBAAS,IADc,mBAC1CC,EAD0C,KACnCC,EADmC,KAGjD,MAAO,CAACD,EADM,mCAAOA,MAAOA,EAAOE,SAAU,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,QAAQH,KAAMA,GAAUC,MAIxFO,EAAe,CACnBC,EAAG,GACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MA0CUC,MAvCf,WAAgB,IAAD,EAC2Bd,EAAS,CAAEC,KAAM,WAD5C,mBACNc,EADM,KACOC,EADP,OAEuBhB,EAAS,CAAEC,KAAM,WAFxC,mBAENgB,EAFM,KAEKC,EAFL,OAKiBf,mBAAS,IAAIgB,MAL9B,mBAKNC,EALM,KAKGC,EALH,OAMmBlB,mBAAS,IAAIgB,MANhC,mBAMNG,EANM,KAMIC,EANJ,KA4Bb,OApBAC,qBAAU,WACR,IACMC,GADU,IAAMV,GACaN,EAAaQ,GAE5CS,EAAc,IAAIP,KACtBO,EAAYC,WAAWD,EAAYE,aAAeH,GAElDJ,EAAWK,GAGX,IACMG,GADW,IAAOd,GACaN,EAAaQ,GAE9Ca,EAAe,IAAIX,KACvBW,EAAaH,WAAWG,EAAaF,aAAeC,GAEpDN,EAAYO,KACX,CAACf,EAAaE,IAGV,sBAAKc,UAAU,YAAf,2BACUf,EAAiB,uBAD3B,eAEQE,EAFR,IAEwB,uBAE7B,uBAJK,eAMQE,EAAQY,iBANhB,IAMkC,uBAAM,uBANxC,gBAOSV,EAASU,iBAPlB,IAOoC,2BCxC9BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76a8f0a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport { useState, useEffect } from 'react'\nimport './App.css';\n\nconst useInput = ({ type, otherProps /*...*/ }) => {\n  const [value, setValue] = useState(\"\");\n  const input = <input value={value} onChange={e => setValue(e.target.value)} type={type} {...otherProps}/>;\n  return [value, input];\n}\n\nconst hpRegenLevel = {\n  1: 86,\n  2: 81.7,\n  3: 75.9,\n  4: 68.3\n}\n\nfunction App() {\n  const [remainingHP, remainingHPInput] = useInput({ type: \"number\" });\n  const [heroLevel, heroLevelInput] = useInput({ type: \"number\" }, {min: 1, max: 4});\n  // const [time, timeInput] = useInput({ type: \"datetime-local\" });\n\n  const [next200, setNext200] = useState(new Date());\n  const [next1000, setNext1000] = useState(new Date());\n\n  useEffect(() => {\n    const diff200 = 200 - remainingHP;\n    const remainingTime200 = diff200 * hpRegenLevel[heroLevel];\n\n    let next200Temp = new Date();\n    next200Temp.setSeconds(next200Temp.getSeconds() + remainingTime200);\n\n    setNext200(next200Temp);\n\n\n    const diff1000 = 1000 - remainingHP;\n    const remainingTime1000 = diff1000 * hpRegenLevel[heroLevel];\n\n    let next1000Temp = new Date();\n    next1000Temp.setSeconds(next1000Temp.getSeconds() + remainingTime1000);\n\n    setNext1000(next1000Temp);\n  }, [remainingHP, heroLevel])\n\n\n  return <div className='container'>\n    Remaining HP: {remainingHPInput}<br />\n    Hero level: {heroLevelInput} <br />\n    {/* Time: {timeInput} <br /> */}\n    <br />\n\n    Next 200HP: {next200.toLocaleString()} <br /><br />\n    Next 1000HP: {next1000.toLocaleString()} <br />\n  </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}